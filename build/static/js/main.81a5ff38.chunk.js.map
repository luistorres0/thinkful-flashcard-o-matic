{"version":3,"sources":["Layout/Header.js","Layout/Home/Deck.js","Layout/Home/DeckList.js","utils/api/index.js","Layout/Common/Breadcrumb.js","Layout/Study/NotEnoughView.js","Layout/Study/StudyCard.js","Layout/Study/StudyView.js","Layout/NotFound.js","Layout/Common/CreateEditCardForm.js","Layout/AddCard/AddCardView.js","Layout/ViewDeck/CardDetails.js","Layout/ViewDeck/CardDetailsList.js","Layout/ViewDeck/DeckDescription.js","Layout/ViewDeck/DeckView.js","Layout/EditDeck/EditDeckForm.js","Layout/EditDeck/EditDeckView.js","Layout/EditCard/EditCardView.js","Layout/AddDeck/AddDeckForm.js","Layout/AddDeck/AddDeckView.js","Layout/Home/HomeView.js","Layout/index.js","App.js","index.js"],"names":["Header","className","Deck","props","id","name","description","cards","handleDeleteDeck","length","to","onClick","DeckList","decks","map","deck","API_BASE_URL","process","headers","Headers","stripCards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","deleteDeck","createCard","card","Number","updateCard","updatedCard","deleteCard","cardId","append","Breadcrumb","crumbs","isLast","index","arr","aria-label","crumb","NotEnoughView","useParams","StudyCard","useState","isFrontSideUp","setIsFrontSideUp","cardIndex","setCardIndex","history","useHistory","front","back","totalCards","currentState","newIndex","window","confirm","push","StudyView","setDeck","useEffect","abortController","AbortController","data","loadDeck","abort","NotFound","CreateEditCardForm","isEditing","initialFormData","formData","setFormData","currentFormData","handleSaveCard","event","preventDefault","handleChange","newData","target","value","onSubmit","htmlFor","aria-describedby","onChange","type","AddCardView","CardDetails","handleDeleteCard","CardDetailsList","DeckDescription","DeckView","EditDeckForm","newFormData","handleSubmit","goBack","EditDeckView","loadedDeck","EditCardView","find","AddDeckForm","result","AddDeckView","HomeView","exact","path","Layout","setDecks","location","useLocation","loadDecks","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81a5ff38.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Deck = (props) => {\r\n  const { id, name, description, cards, handleDeleteDeck } = props;\r\n\r\n  return (\r\n    <li className=\"list-group-item\">\r\n      <div className=\"row d-flex justify-content-between px-3\">\r\n        <h3>{name}</h3>\r\n        <p>{cards.length} cards</p>\r\n      </div>\r\n      <div className=\"row px-3\">\r\n        <p>{description}</p>\r\n      </div>\r\n      <div className=\"row d-flex justify-content-between px-3\">\r\n        <div>\r\n          <Link className=\"btn btn-secondary mr-2\" to={`/decks/${id}`}>\r\n            View\r\n          </Link>\r\n          <Link className=\"btn btn-primary\" to={`/decks/${id}/study`}>\r\n            Study\r\n          </Link>\r\n        </div>\r\n        <div>\r\n          <button className=\"btn btn-danger\" onClick={() => handleDeleteDeck(id)}>\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Deck;\r\n","import React from \"react\";\r\nimport Deck from \"./Deck\";\r\n\r\nconst DeckList = (props) => {\r\n  const { decks, handleDeleteDeck } = props;\r\n\r\n  return (\r\n    <ul className=\"list-group\">\r\n      {decks.map((deck) => (\r\n        <Deck\r\n          key={deck.id}\r\n          id={deck.id}\r\n          name={deck.name}\r\n          description={deck.description}\r\n          cards={deck.cards}\r\n          handleDeleteDeck={handleDeleteDeck}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default DeckList;\r\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Breadcrumb = ({crumbs = []}) => {\r\n\r\n  const isLast = (index, arr) => {\r\n    const lastIndex = arr.length - 1;\r\n\r\n    return index === lastIndex;\r\n  };\r\n\r\n  return (\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        {crumbs.map((crumb, index) => {\r\n          return (\r\n            <li key={index} className=\"breadcrumb-item\">\r\n              {isLast(index, crumbs) ? (\r\n                <p className=\"text-secondary m-0\">{crumb}</p>\r\n              ) : (\r\n                <Link to=\"/\">{crumb}</Link>\r\n              )}\r\n            </li>\r\n          );\r\n        })}\r\n      </ol>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n","import React from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nconst NotEnoughView = (props) => {\r\n  const { deck } = props;\r\n  const { deckId } = useParams();\r\n\r\n  return (\r\n    <div>\r\n      <h3>Not enough cards.</h3>\r\n      <p>You need at least 3 cards to study. There are {deck.cards.length} cards in this deck.</p>\r\n      <Link to={`/decks/${deckId}/cards/new`} className=\"btn btn-primary\">\r\n        + Add Cards\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotEnoughView;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst StudyCard = (props) => {\r\n  const [isFrontSideUp, setIsFrontSideUp] = useState(true);\r\n  const [cardIndex, setCardIndex] = useState(0);\r\n  const history = useHistory();\r\n\r\n  const { cards } = props;\r\n  const { front, back } = cards[cardIndex];\r\n  const totalCards = cards.length;\r\n\r\n  const handleFlipCard = () => {\r\n    setIsFrontSideUp((currentState) => !currentState);\r\n  };\r\n\r\n  const handleNextCard = () => {\r\n    setIsFrontSideUp((currentState) => !currentState);\r\n    const newIndex = cardIndex + 1;\r\n\r\n    if (newIndex >= cards.length) {\r\n      const result = window.confirm(\"Restart cards?\\n\\nClick 'cancel' to return to the home page.\");\r\n      if (result) {\r\n        setCardIndex(0);\r\n      } else {\r\n        history.push(\"/\");\r\n      }\r\n    } else {\r\n      setCardIndex(newIndex);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card w-100\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{`Card ${cardIndex + 1} of ${totalCards}`}</h5>\r\n        <p className=\"card-text\">{isFrontSideUp ? front : back}</p>\r\n        <button className=\"btn btn-secondary mr-2\" onClick={handleFlipCard}>\r\n          Flip\r\n        </button>\r\n\r\n        {!isFrontSideUp && (\r\n          <button className=\"btn btn-primary\" onClick={handleNextCard}>\r\n            Next\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudyCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readDeck } from \"../../utils/api\";\r\nimport Breadcrumb from \"../Common/Breadcrumb\";\r\n\r\nimport NotEnoughView from \"./NotEnoughView\";\r\nimport StudyCard from \"./StudyCard\";\r\n\r\nconst StudyView = (props) => {\r\n  const [deck, setDeck] = useState(null);\r\n  const { deckId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    const loadDeck = async () => {\r\n      const data = await readDeck(deckId, abortController.signal);\r\n      setDeck(data);\r\n    };\r\n\r\n    loadDeck();\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  if (deck) {\r\n    return (\r\n      <div>\r\n        <Breadcrumb crumbs={[\"Home\", deck.name, \"Study\"]} />\r\n        <h2>Study: {deck.name}</h2>\r\n        {deck.cards.length > 2 ? <StudyCard cards={deck.cards} /> : <NotEnoughView deck={deck} />}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  // } else if (deck && deck.cards.length <= 2) {\r\n  //   return <NotEnoughView deck={deck} />;\r\n};\r\n\r\nexport default StudyView;\r\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { createCard, updateCard } from \"../../utils/api\";\r\n\r\nconst CreateEditCardForm = ({ front = \"\", back = \"\", isEditing = false }) => {\r\n  const initialFormData = {\r\n    front: \"\",\r\n    back: \"\",\r\n  };\r\n\r\n  const { deckId, cardId } = useParams();\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({ ...initialFormData });\r\n\r\n  useEffect(() => {\r\n    if (isEditing) {\r\n      setFormData((currentFormData) => {\r\n        return {\r\n          ...currentFormData,\r\n          front,\r\n          back,\r\n        };\r\n      });\r\n    }\r\n  }, [back, front, isEditing]);\r\n\r\n  const handleSaveCard = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isEditing) {\r\n      await updateCard({ ...formData, id: Number(cardId), deckId: Number(deckId) });\r\n\r\n      setFormData({ ...initialFormData });\r\n\r\n      history.push(`/decks/${deckId}`);\r\n    } else {\r\n      await createCard(deckId, { ...formData });\r\n\r\n      setFormData({ ...initialFormData });\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const newData = {\r\n      ...formData,\r\n      [event.target.name]: event.target.value,\r\n    };\r\n\r\n    setFormData(newData);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSaveCard}>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"front\" className=\"form-label\">\r\n          Front\r\n        </label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"front\"\r\n          name=\"front\"\r\n          aria-describedby=\"frontFormInput\"\r\n          onChange={handleChange}\r\n          value={formData.front}\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"back\" className=\"form-label\">\r\n          Back\r\n        </label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"back\"\r\n          name=\"back\"\r\n          aria-describedby=\"frontFormInput\"\r\n          onChange={handleChange}\r\n          value={formData.back}\r\n        />\r\n      </div>\r\n\r\n      <Link to={`/decks/${deckId}`} className=\"btn btn-secondary mr-2\">\r\n        Done\r\n      </Link>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Save\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CreateEditCardForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readDeck } from \"../../utils/api\";\r\nimport Breadcrumb from \"../Common/Breadcrumb\";\r\nimport CreateEditCardForm from \"../Common/CreateEditCardForm\";\r\n\r\nconst AddCardView = (props) => {\r\n  const { deckId } = useParams();\r\n  const [deck, setDeck] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    const loadDeck = async () => {\r\n      const data = await readDeck(deckId, abortController.signal);\r\n      setDeck(data);\r\n    };\r\n\r\n    loadDeck();\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  if (deck) {\r\n    return (\r\n      <div>\r\n        <Breadcrumb crumbs={[\"Home\", deck.name, \"Add Card\"]} />\r\n        <h2>{deck.name}: Add Card</h2>\r\n        <CreateEditCardForm />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p>Loading...</p>;\r\n  }\r\n};\r\n\r\nexport default AddCardView;\r\n","import React from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nconst CardDetails = (props) => {\r\n  const { deckId } = useParams();\r\n  const { card, handleDeleteCard } = props;\r\n  const { front, back, id } = card;\r\n\r\n  return (\r\n    <li className=\"list-group-item\">\r\n      <div className=\"row p-3\">\r\n        <div className=\"col\"><p>{front}</p></div>\r\n        <div className=\"col\"><p>{back}</p></div>\r\n      </div>\r\n      <div className=\"row p-3\">\r\n        <div className=\"col d-flex justify-content-end\">\r\n          <Link to={`/decks/${deckId}/cards/${id}/edit`} className=\"btn btn-secondary mr-3\">\r\n            Edit\r\n          </Link>\r\n          <button className=\"btn btn-danger\" onClick={() => handleDeleteCard(id)}>\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default CardDetails;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { deleteCard, readDeck } from \"../../utils/api\";\r\nimport CardDetails from \"./CardDetails\";\r\n\r\nconst CardDetailsList = (props) => {\r\n  const { cards, setDeck } = props;\r\n  const { deckId } = useParams();\r\n\r\n  const handleDeleteCard = async (id) => {\r\n    const result = window.confirm(\r\n      \"Delete this card?\\n\\nYou will not be able to recover after deletion.\"\r\n    );\r\n    if (result) {\r\n      await deleteCard(id);\r\n      const updatedDeck = await readDeck(deckId);\r\n      setDeck(updatedDeck);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-4\">\r\n      <h2>Cards</h2>\r\n      <ul className=\"list-group\">\r\n        {cards.map((card) => (\r\n          <CardDetails key={card.id} card={card} handleDeleteCard={handleDeleteCard} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardDetailsList;\r\n","import React from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nconst DeckDescription = (props) => {\r\n  const { name, description, handleDeleteDeck } = props;\r\n  const { deckId } = useParams();\r\n\r\n  return (\r\n    <div>\r\n      <h3>{name}</h3>\r\n      <p>{description}</p>\r\n\r\n      <div className=\"d-flex justify-content-between\">\r\n        <div>\r\n          <Link to={`/decks/${deckId}/edit`} className=\"btn btn-secondary mr-2\">\r\n            Edit\r\n          </Link>\r\n          <Link to={`/decks/${deckId}/study`} className=\"btn btn-primary mr-2\">\r\n            Study\r\n          </Link>\r\n          <Link to={`/decks/${deckId}/cards/new`} className=\"btn btn-primary\">\r\n            +Add Cards\r\n          </Link>\r\n        </div>\r\n        <div>\r\n          <button className=\"btn btn-danger\" onClick={() => handleDeleteDeck(deckId)}>\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeckDescription;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readDeck } from \"../../utils/api\";\r\nimport Breadcrumb from \"../Common/Breadcrumb\";\r\nimport CardDetailsList from \"./CardDetailsList\";\r\nimport DeckDescription from \"./DeckDescription\";\r\n\r\nconst DeckView = (props) => {\r\n  const { handleDeleteDeck } = props;\r\n  const { deckId } = useParams();\r\n  const [deck, setDeck] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    const loadDeck = async () => {\r\n      const data = await readDeck(deckId, abortController.signal);\r\n      setDeck(data);\r\n    };\r\n\r\n    loadDeck();\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  if (deck) {\r\n    return (\r\n      <div className=\"mb-5\">\r\n        <Breadcrumb crumbs={[\"Home\", deck.name]} />\r\n        <DeckDescription\r\n          name={deck.name}\r\n          description={deck.description}\r\n          handleDeleteDeck={handleDeleteDeck}\r\n        />\r\n        <CardDetailsList cards={deck.cards} setDeck={setDeck}/>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p>Loading...</p>;\r\n  }\r\n};\r\n\r\nexport default DeckView;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { updateDeck } from \"../../utils/api\";\r\n\r\nconst EditDeckForm = ({ name = \"\", description = \"\" }) => {\r\n  const initialFormData = {\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({ ...initialFormData });\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      name,\r\n      description,\r\n    });\r\n  }, [description, name]);\r\n\r\n  const handleChange = (event) => {\r\n    const newFormData = {\r\n      ...formData,\r\n      [event.target.name]: event.target.value,\r\n    };\r\n\r\n    setFormData(newFormData);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    await updateDeck({ ...formData, id: deckId });\r\n\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"name\" className=\"form-label\">\r\n          Name\r\n        </label>\r\n        <input\r\n          className=\"form-control\"\r\n          id=\"name\"\r\n          name=\"name\"\r\n          aria-describedby=\"nameFormInput\"\r\n          onChange={handleChange}\r\n          value={formData.name}\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"description\" className=\"form-label\">\r\n          Description\r\n        </label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"description\"\r\n          name=\"description\"\r\n          aria-describedby=\"descriptionFormInput\"\r\n          onChange={handleChange}\r\n          value={formData.description}\r\n        />\r\n      </div>\r\n\r\n      <Link to={`/decks/${deckId}`} className=\"btn btn-secondary mr-2\">\r\n        Cancel\r\n      </Link>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EditDeckForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { readDeck } from \"../../utils/api\";\r\nimport Breadcrumb from \"../Common/Breadcrumb\";\r\nimport EditDeckForm from \"./EditDeckForm\";\r\n\r\nconst EditDeckView = (props) => {\r\n  const [deck, setDeck] = useState(null);\r\n  const { deckId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    const loadDeck = async () => {\r\n      const loadedDeck = await readDeck(deckId, abortController.signal);\r\n      setDeck(loadedDeck);\r\n    };\r\n\r\n    loadDeck();\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  if (deck) {\r\n    return (\r\n      <div>\r\n        <Breadcrumb crumbs={[\"Home\", deck.name, \"Edit Deck\"]} />\r\n        <h2>Edit Deck</h2>\r\n        <EditDeckForm name={deck.name} description={deck.description} />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p>Loading...</p>;\r\n  }\r\n};\r\n\r\nexport default EditDeckView;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { readDeck } from \"../../utils/api\";\r\nimport Breadcrumb from \"../Common/Breadcrumb\";\r\nimport CreateEditCardForm from \"../Common/CreateEditCardForm\";\r\n\r\nconst EditCardView = (props) => {\r\n  const { deckId, cardId } = useParams();\r\n  const [deck, setDeck] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    const loadDeck = async () => {\r\n      const loadedDeck = await readDeck(deckId, abortController.signal);\r\n      setDeck(loadedDeck);\r\n    };\r\n\r\n    loadDeck();\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId, cardId]);\r\n\r\n  if (deck) {\r\n    const card = deck.cards.find((card) => `${card.id}` === cardId);\r\n\r\n    return (\r\n      <div>\r\n        <Breadcrumb crumbs={[\"Home\", `Deck ${deck.name}`, `Edit Card ${cardId}`]} />\r\n        <h2>Edit Card</h2>\r\n        <CreateEditCardForm front={card.front} back={card.back} isEditing={true} />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p>Loading...</p>;\r\n  }\r\n};\r\n\r\nexport default EditCardView;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { createDeck } from \"../../utils/api\";\r\n\r\nconst AddDeckForm = (props) => {\r\n  const initialFormData = {\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({ ...initialFormData });\r\n\r\n  const handleChange = (event) => {\r\n    const newFormData = {\r\n      ...formData,\r\n      [event.target.name]: event.target.value,\r\n    };\r\n\r\n    setFormData(newFormData);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const result = await createDeck({ ...formData });\r\n\r\n    history.push(`/decks/${result.id}`);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"name\" className=\"form-label\">\r\n          Name\r\n        </label>\r\n        <input\r\n          className=\"form-control\"\r\n          id=\"name\"\r\n          name=\"name\"\r\n          type=\"text\"\r\n          aria-describedby=\"nameFormInput\"\r\n          onChange={handleChange}\r\n          value={formData.name}\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"description\" className=\"form-label\">\r\n          Description\r\n        </label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"description\"\r\n          name=\"description\"\r\n          aria-describedby=\"descriptionFormInput\"\r\n          onChange={handleChange}\r\n          value={formData.description}\r\n        />\r\n      </div>\r\n\r\n      <Link to=\"/\" className=\"btn btn-secondary mr-2\">\r\n        Cancel\r\n      </Link>\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddDeckForm;\r\n","import React from \"react\";\r\nimport Breadcrumb from \"../Common/Breadcrumb\";\r\nimport AddDeckForm from \"./AddDeckForm\";\r\n\r\nconst AddDeckView = (props) => {\r\n  return (\r\n    <div>\r\n      <Breadcrumb crumbs={[\"Home\", \"Create Deck\"]} />\r\n      <h2>Create Deck</h2>\r\n      <AddDeckForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddDeckView;\r\n","import React from \"react\";\r\nimport { Link, Route, Switch } from \"react-router-dom\";\r\nimport DeckList from \"./DeckList\";\r\nimport StudyView from \"../Study/StudyView\";\r\nimport NotFound from \"../NotFound\";\r\nimport AddCardView from \"../AddCard/AddCardView\";\r\nimport DeckView from \"../ViewDeck/DeckView\";\r\nimport EditDeckView from \"../EditDeck/EditDeckView\";\r\nimport EditCardView from \"../EditCard/EditCardView\";\r\nimport AddDeckView from \"../AddDeck/AddDeckView\";\r\n\r\nconst HomeView = (props) => {\r\n  const { decks, handleDeleteDeck } = props;\r\n\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Link className=\"btn btn-secondary mb-3\" to=\"/decks/new\">\r\n            + Create Deck\r\n          </Link>\r\n          <DeckList decks={decks} handleDeleteDeck={handleDeleteDeck} />\r\n        </Route>\r\n        <Route path=\"/decks/:deckId/cards/:cardId/edit\">\r\n          <EditCardView />\r\n        </Route>\r\n        <Route path=\"/decks/:deckId/cards/new\">\r\n          <AddCardView />\r\n        </Route>\r\n        <Route path=\"/decks/:deckId/study\">\r\n          <StudyView />\r\n        </Route>\r\n        <Route path=\"/decks/:deckId/edit\">\r\n          <EditDeckView />\r\n        </Route>\r\n        <Route path=\"/decks/new\">\r\n          <AddDeckView />\r\n        </Route>\r\n        <Route path=\"/decks/:deckId\">\r\n          <DeckView handleDeleteDeck={handleDeleteDeck} />\r\n        </Route>\r\n        <Route>\r\n          <NotFound />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeView;\r\n","import React, { useState, useEffect } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport HomeView from \"./Home/HomeView\";\nimport { listDecks, deleteDeck } from \"../utils/api/index\";\n\nfunction Layout() {\n  const [decks, setDecks] = useState([]);\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    const loadDecks = async () => {\n      const data = await listDecks(abortController.signal);\n      setDecks(data);\n    };\n\n    loadDecks();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [location]);\n\n  const handleDeleteDeck = async (deckId) => {\n    const result = window.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\");\n    if (result) {\n      await deleteDeck(deckId, new AbortController().signal);\n      const data = await listDecks(new AbortController().signal);\n      setDecks(data);\n      history.push(\"/\");\n    }\n  };\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <HomeView decks={decks} handleDeleteDeck={handleDeleteDeck} />\n      </div>\n    </>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}